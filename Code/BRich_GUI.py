# BRich Forex Trader Dashboard – Streamlit Application
# Launch with: streamlit run forex_gui_app.py
# -------------------------------------------------------------
# """
# # A user-friendly interface to **train** the model, **run back-tests**, and
# analyze results generated by the BRich Forex Trader pipeline.

# This application utilizes relative project paths to enhance portability:
# PROJECT_ROOT = Path(__file__).parent

# Directory structure:
#     ├─ BRich_GUI.py                ← this file
#     ├─ Final_train.py              ← script for training the model
#     ├─ Final_simulate.py           ← script for running back-tests
#     ├─ Training_outputs            ← directory populated by the scripts
#     ├─ fx_background.png           ← background image
#     ├─ brich.png                   ← logo image
#     ├─ brich_logo.png              ← logo image
#     └─ requirements.txt            ← list of dependencies
# """

# ────────────────────────────── LIBRARIES ──────────────────────────────
from __future__ import annotations
import subprocess
from pathlib import Path
from typing import List
import os
import base64
import numpy as np
import joblib
import pandas as pd
import plotly.express as px
import streamlit as st
import plotly.graph_objects as go
import yfinance as yf

# ────────────────────────────── CONFIG ──────────────────────────────
# Use relative paths instead of absolute paths
PROJECT_ROOT = Path(__file__).parent
OUTPUT_DIR   = PROJECT_ROOT / "Training_outputs"
TRAIN_SCRIPT = PROJECT_ROOT / "Final_train.py"
SIM_SCRIPT   = PROJECT_ROOT / "Final_simulate.py"

# ──────────────────────────── HELPERS ──────────────────────────────
@st.cache_data(show_spinner="Loading trades …")
def load_trades(dir_: Path) -> pd.DataFrame:
    fp = dir_ / "trading_log.json"
    return pd.read_json(fp) if fp.exists() else pd.DataFrame()

@st.cache_data(show_spinner="Loading equity curve …")
def load_equity(dir_: Path) -> pd.DataFrame:
    fp = dir_ / "equity_curve.json"
    return pd.read_json(fp) if fp.exists() else pd.DataFrame()

@st.cache_data(show_spinner="Loading accuracy …")
def load_accuracy(dir_: Path) -> pd.DataFrame:
    fp = dir_ / "prediction_accuracy.csv"
    return pd.read_csv(fp) if fp.exists() else pd.DataFrame()

@st.cache_data(show_spinner="Loading simulation details …")
def simulation_details(dir_: Path) -> pd.DataFrame:
    fp = dir_ / "simulation_details.json"
    return pd.read_json(fp) if fp.exists() else pd.DataFrame()

@st.cache_data(show_spinner="Loading trained symbols …")
def load_trained_symbols(dir_: Path) -> List[str]:
    """Load the list of symbols that have been trained (symbols.pkl)."""
    pkl = dir_ / "symbols.pkl"
    if pkl.exists():
        symbols = joblib.load(pkl)
        # convert numpy array to Python list so truth-testing works
        return symbols.tolist() if hasattr(symbols, "tolist") else list(symbols)
    return []

# ────────────────────────────── FUNCTIONS ──────────────────────────────
def run_cmd(cmd: List[str]) -> bool:
    """Run a subprocess and stream stdout / stderr into an expander."""
    with st.expander("📜 Console output", expanded=True):
        progress_bar, status_text = st.progress(0), st.empty()
        env = {**os.environ, "PYTHONIOENCODING": "utf-8", "TF_CPP_MIN_LOG_LEVEL": "2", "TF_ENABLE_ONEDNN_OPTS": "0"}
        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, encoding='utf-8', errors='replace', env=env)
        current_epoch = total_epochs = 0
        
        for line in proc.stdout:  # type: ignore[attr-defined]
            line = line.rstrip()
            if not line or any(skip in line for skip in ["tensorflow/core/util/port.cc", "LOCAL_RANK", "CUDA_VISIBLE_DEVICES"]):
                continue
            if "Epoch" in line and "completed" in line:
                try:
                    current_epoch, total_epochs = map(int, line.split()[1].split('/'))
                    progress_bar.progress(current_epoch / total_epochs)
                    status_text.text(f"Training Progress: Epoch {current_epoch}/{total_epochs}")
                except: pass
            st.text(line)

        proc.wait()
        progress_bar.progress(1.0)
        status_text.text("Training Complete!")
        st.write(f"↪ Exit code: {proc.returncode}")
    return proc.returncode == 0

# ────────────────────────────── LANDING PAGE ──────────────────────────────
def landing_page():
    """Landing page with background image, header, and hero section"""
    # Load and encode background image
    bg_path = PROJECT_ROOT / "fx_background.png"
    with open(bg_path, "rb") as f:
        b64 = base64.b64encode(f.read()).decode()

    # Set background and styles
    st.markdown(f"""<style>.stApp {{background: linear-gradient(rgba(255,255,255,0.7), rgba(255,255,255,0.7)), url("data:image/png;base64,{b64}"); background-size: cover; background-position: center;}}</style>""", unsafe_allow_html=True)
    
    # Define all CSS styles in one block
    styles = """
    <style>
    .main-header {background: linear-gradient(90deg, #EF4136 0%, #FBB040 100%); padding: 2rem 0 1.5rem 0; border-radius: 20px; margin: -3rem 0 5rem 0; box-shadow: 0 2px 16px rgba(68,48,110,0.3); display: flex; align-items: center; justify-content: space-between; width: 100vw; max-width: 100%; position: relative;}
    .header-title {color: #fff; font-size: 2rem; font-weight: 700; margin-left: 3vw; margin-top: -0.5vw; letter-spacing: 0.02em; font-family: 'Segoe UI', sans-serif;}
    .header-btn {background: #fff2; color: #fff; font-weight: 600; font-size: 1.1rem; padding: 0.7rem 2rem; border-radius: 12px; border: none; margin-right: 3vw; margin-left: 1vw; transition: background 0.2s; cursor: pointer; text-decoration: none;}
    .header-btn:hover {background: #fff5; color: #e0e0e0;}
    .hero-title {font-size: 3rem; font-weight: 800; margin-bottom: 0.4rem; letter-spacing: -2px; text-align: center; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);}
    .hero-logo {display: flex; justify-content: center; align-items: center; margin: 2rem auto 3rem auto;}
    .hero-logo img {display: block; margin: 0 auto;}
    .hero-subtitle {font-size: 1.5rem; margin-bottom: 2.2rem; text-align: center;}
    </style>
    """
    st.markdown(styles, unsafe_allow_html=True)

    # Render header and hero section
    st.markdown('<div class="main-header"><span class="header-title">Let\'s Be Rich with US!</span></div>', unsafe_allow_html=True)
    st.markdown('<div class="hero-title">Master Your Investments with:</div>', unsafe_allow_html=True)
    
    # Load and display logo
    logo_path = PROJECT_ROOT / "brich.png"
    st.logo = (logo_path)
    if logo_path.exists():
        st.markdown(f'<div class="hero-logo"><img src="data:image/png;base64,{base64.b64encode(open(str(logo_path), "rb").read()).decode()}" height="200"/></div>', unsafe_allow_html=True)
    # Display subtitle and explore button
    st.markdown('<div class="hero-subtitle">We offer a wide range of benefits to enhance your trading experience with AI. By using our platform, we can ensure you get the accurate predictions and make the profits you deserve. Leave it to AI, and he will do the rest.</div>', unsafe_allow_html=True)

    # ───────────────────────── Quick Navigation ─────────────────────────
    st.markdown("<style>.quick-nav-header{text-align:center;margin:2rem 0;font-size:2rem;font-weight:600;}.nav-caption{text-align:center!important;margin-top:0!important;}</style>", unsafe_allow_html=True)
    st.markdown('<div class="quick-nav-header">Quick Navigation</div>', unsafe_allow_html=True)
    nav1, nav2, nav3 = st.columns([3, 3, 3], vertical_alignment="top", gap="large")
    with nav1:
        if st.button("🔧 Forex Analysis", key="go_analysis", use_container_width=True):
            st.session_state["page"] = "Forex Analysis"
            st.rerun()
        st.markdown(
            """
            <div class="nav-caption">
                Choose any currency pair and time span, then run our AI-powered training pipeline 
                to preprocess market features, train the model, and generate detailed performance metrics.
                Dive into per-epoch loss curves, MAE/​MAPE tables, and feature importance outputs 
                so you can fine-tune your strategy with full transparency.
            </div>
            """, unsafe_allow_html=True)
    with nav2:
        if st.button("💰 Trading Simulation", key="go_simulation", use_container_width=True):
            st.session_state["page"] = "Trading Simulation"
            st.rerun()
        st.markdown(
            """
            <div class="nav-caption">
                Apply your trained model to historical price data and simulate every trade under realistic 
                leverage, slippage, take-profit and stop-loss rules. Review detailed trade logs, equity curves,
                and P&L breakdowns to understand how your strategy would have performed in live markets.
            </div>
            """, unsafe_allow_html=True)
    with nav3:
        if st.button("📈 Summary", key="go_summary", use_container_width=True):
            st.session_state["page"] = "Summary"
            st.rerun()
        st.markdown(
            """
            <div class="nav-caption">
                View a consolidated dashboard that pulls together both your model training results 
                and back-test performance for each currency pair. Compare key metrics—ROI, final equity, 
                prediction accuracy (MAE/​MAPE), and equity growth—to quickly spot your top-performing strategies.
            </div>
            """, unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    st.markdown('<div class="present-text">Developed by: Group 13</div>', unsafe_allow_html=True)
    st.markdown('<div class="present-text">Purpose: Final Project for Machine Learning Class</div>', unsafe_allow_html=True)

# ────────────────────────────── FOREX ANALYSIS PAGE ──────────────────────────────
def analysis_page():

    # ────────────────────────────── First Section ──────────────────────────────
    # Main title and header setup
    st.markdown('<div class="main-card">', unsafe_allow_html=True)
    st.title("🔧 Forex Analysis")
    st.markdown('<h2 style="text-align: center;">Analyse Your Forex Data</h2>', unsafe_allow_html=True)

    # Currency pair input and date range selection
    input_currency = st.text_input("Enter a currency pair", value="TWD/USD")
    col1, col2 = st.columns(2)
    with col1: start_date = st.date_input("Start Date", pd.Timestamp.now() - pd.DateOffset(years=10))
    with col2: end_date = st.date_input("End Date", pd.Timestamp.now())
    
    # Data fetching and validation
    yf_symbol = input_currency.replace('/', '') + '=X'
    df = yf.download(yf_symbol, start=start_date, end=end_date, interval='1d')
    if df.empty:
        st.error(f"No data available for {input_currency}. Please try a different currency pair or date range.")
        return
    
    # Create and display candlestick chart
    cols = {col: [c for c in df.columns if col in c][0] for col in ['Open', 'High', 'Low', 'Close']}
    fig = go.Figure(data=[go.Candlestick(x=df.index, open=df[cols['Open']], high=df[cols['High']], 
                                        low=df[cols['Low']], close=df[cols['Close']])])
    fig.update_layout(title=f'{input_currency} Price Chart', xaxis_title='Date', yaxis_title='Price', 
                     template='plotly_white')
    st.plotly_chart(fig, use_container_width=True)
    
    # Display price statistics
    if len(df) >= 2:
        current_price = df[cols['Close']].iloc[-1]
        price_change = ((current_price - df[cols['Close']].iloc[-2]) / df[cols['Close']].iloc[-2] * 100)
        col1, col2 = st.columns(2)
        col1.metric(f"Current {input_currency} Price", f"${current_price:.4f}")
        col2.metric(f"24H Change", f"{price_change:.2f}%")
    else:
        st.warning("Not enough data points to calculate price changes.")
    
    # ────────────────────────────── Second Section ──────────────────────────────
    # Training options and configuration
    st.subheader("Training on New Currency Options")
    stage = st.selectbox("Stage Selection", ["Train and Predict", "Train", "Predict"])
    epochs = st.slider("Number of epochs", 10, 200, 50)
    col1, col2 = st.columns(2)
    with col1:
        leverage = st.slider("Leverage", 1, 10, 5)
    with col2:
        initial_capital = st.number_input("Initial Capital per Asset ($)", 1000, 100000, 1000)

    # Training execution and chart display logic
    if st.button("🚀 Start Training", type="primary") and TRAIN_SCRIPT.exists():
        with st.container(), st.spinner("Training in progress..."):
            st.info("Initializing training...")
            try:
                cmd = ["python", str(TRAIN_SCRIPT), "--stage", stage.lower().replace(" ", "_"),
                        "--currency", input_currency, "--epochs", str(epochs), 
                        "--leverage", str(leverage), "--initial_capital", str(initial_capital)]
                if run_cmd(cmd):
                    st.success("Training complete!")
                    st.cache_data.clear(); st.rerun()
            except Exception as e:
                st.error(f"An error occurred during training: {str(e)}")
    else:
        st.error(f"Training script not found at: {TRAIN_SCRIPT}") if not TRAIN_SCRIPT.exists() else None

    # Chart display configuration
    TRAIN_PNGS = ["training_history.png"]

    # ────────────────────────────── Third Section ──────────────────────────────
    if stage in ["Train", "Train and Predict"]:
        st.subheader("Training Charts" if stage == "Train" else "Training and Trading Log")
        for name in TRAIN_PNGS:
            p = OUTPUT_DIR / name
            if p.exists():
                st.image(p, use_container_width=True)
                acc_df = load_accuracy(OUTPUT_DIR)
                if not acc_df.empty:
                    accuracy = acc_df['accuracy'].mean() if 'accuracy' in acc_df.columns else \
                        100 * (1 - np.abs((acc_df['predicted'] - acc_df['actual']) / acc_df['actual'])).mean()
                    st.write(f"Training Accuracy: {accuracy:.2f}%")
                    with st.expander("Prediction accuracy by currency pair"):
                        summary = acc_df.groupby("symbol").apply(
                            lambda g: pd.Series({
                                "MAE": (g["predicted"] - g["actual"]).abs().mean(),
                                "MAPE%": ((g["predicted"] - g["actual"]).abs() / g["actual"]).mean() * 100}),
                            include_groups=False)
                        st.dataframe(summary.round(4))
                else:
                    st.info("No accuracy data available.")
            else:
                st.info(f"Training chart {name} not found." if stage == "Train" else 
                         "Click the '🚀 Start Training' button above to run training. All epoch logs will appear in the console output expander below.")

    if stage in ["Predict", "Train and Predict"]:
        st.subheader("Prediction Results (Trading Log)" if stage == "Predict" else "Trade Plot")
        trades_df = load_trades(OUTPUT_DIR)
        if trades_df.empty:
            st.info("No trading log found. Please run 'Train and Predict' first.")
        else:
            trades_df["Date"] = pd.to_datetime(trades_df["Date"].rename("Date") if "Date" in trades_df.columns else trades_df)
            selected_symbol = st.selectbox("Currency to show", sorted(trades_df["Symbol"].unique()))
            symbol_trades = trades_df[trades_df["Symbol"] == selected_symbol].copy()

            ohlc = symbol_trades.groupby("Date")["Actual Price"].agg(open="first", high="max", low="min", close="last").reset_index()
            fig_trades = go.Figure(data=[go.Candlestick(x=ohlc["Date"], open=ohlc["open"], high=ohlc["high"], low=ohlc["low"], close=ohlc["close"])])
            fig_trades.update_layout(title=f"Trade Price Candlestick - {selected_symbol}", xaxis_title="Date", yaxis_title="Price", template="plotly_white")
            st.plotly_chart(fig_trades, use_container_width=True)

            # Performance Summary
            if "Total Equity" in symbol_trades.columns:
                eq_by_date = symbol_trades.groupby("Date")["Total Equity"].last().reset_index()
                init_eq, last_eq = eq_by_date["Total Equity"].iloc[0], eq_by_date["Total Equity"].iloc[-1]
                roi = (last_eq / init_eq - 1) * 100
                st.subheader(f"Performance Summary - {selected_symbol}")
                c1, c2, c3 = st.columns(3)
                c1.metric("Initial Capital", f"${init_eq:,.3f}"); c2.metric("Final Equity", f"${last_eq:,.3f}"); c3.metric("ROI", f"{roi:.5f}%")

            # Heading for Trade Log Summary
            st.subheader("Trade Log Summary")
            filt_cols = st.columns(3)
            with filt_cols[0]:
                sym_sel = st.multiselect("Symbol", sorted(trades_df["Symbol"].unique()), default=sorted(trades_df["Symbol"].unique()))
            with filt_cols[1]:
                act_sel = st.multiselect("Action", sorted(trades_df["Action"].unique()), default=sorted(trades_df["Action"].unique()))
            with filt_cols[2]:
                date_range = st.date_input("Date range", [])
            
            mask = trades_df["Symbol"].isin(sym_sel) & trades_df["Action"].isin(act_sel)
            if len(date_range) == 2:
                mask &= trades_df["Date"].between(pd.to_datetime(date_range[0]), pd.to_datetime(date_range[1]))
            st.dataframe(trades_df[mask].sort_values("Date"), hide_index=True, use_container_width=True, column_config={"Date": st.column_config.DateColumn(format="YYYY-MM-DD")})
    st.markdown('</div>', unsafe_allow_html=True)

# ────────────────────────────── SIMULATION PAGE ──────────────────────────────
def simulation_page():
    st.markdown('<div class="main-card">', unsafe_allow_html=True)
    st.title("💰 Trading Simulation")
    
    # ───────────────────────────── Select Currency ─────────────────────────────
    st.subheader("Run Simulation")

    # Load trained currencies
    trained = load_trained_symbols(OUTPUT_DIR)
    if not trained:
        st.warning("No currencies have been trained yet. Please train a currency first on the Forex Analysis page.")
        return

    # convert e.g. 'EURUSD=X' → 'EUR/USD'
    display = [sym.replace("=X","") for sym in trained]
    display = [c[:3] + "/" + c[3:] for c in display]
    selected = st.selectbox("Enter a currency pair", display)
    input_currency = selected.replace("/","") + "=X"

    # Simulation parameters
    simulation_days = st.slider("Simulation Days", 30, 180, 90)
    col1, col2 = st.columns(2)
    with col1: leverage = st.slider("Leverage", 1, 10, 5)
    with col2: initial_capital = st.number_input("Initial Capital per Asset ($)", 1000, 100000, 1000)

    # ───────────────────────────── Run Simulation ─────────────────────────────
    if st.button("🚀 Run Simulation", type="primary"):
        if SIM_SCRIPT.exists():
            with st.spinner("Running simulation..."):
                try:
                    cmd = [
                        "python", str(SIM_SCRIPT),
                        "--simulation_days",  str(simulation_days),
                        "--initial_capital",  str(initial_capital),
                        "--leverage",         str(leverage),
                        "--currency",         input_currency]
                    ok = run_cmd(cmd)
                    if ok:
                        st.success("Simulation complete!")
                        st.cache_data.clear()
                        st.rerun()
                except Exception as e:
                    st.error(f"An error occurred during simulation: {str(e)}")
        else:
            st.error(f"Simulation script not found at: {SIM_SCRIPT}")

    # ───────────────────────────── Show Results ─────────────────────────────
    equity_df = load_equity(OUTPUT_DIR)
    acc_df = pd.read_csv(OUTPUT_DIR / "simulation_prediction_accuracy.csv") if (OUTPUT_DIR / "simulation_prediction_accuracy.csv").exists() else pd.DataFrame()

    if equity_df.empty:
        st.info("Run a simulation first to populate data in Training_outputs.")
        return
    equity_df["date"] = pd.to_datetime(equity_df["date"])
    
    # KPI cards
    st.subheader("Key Performance Indicators")
    init_eq, last_eq = equity_df["total_equity"].iloc[[0, -1]]
    roi = (last_eq / init_eq - 1) * 100
    kpi_cols = st.columns(4)
    kpi_cols[0].metric("Initial equity", f"${init_eq:,.2f}")
    kpi_cols[1].metric("Final equity", f"${last_eq:,.2f}")
    kpi_cols[2].metric("ROI", f"{roi:,.2f}%")
    kpi_cols[3].metric("Overall MAE", f"{(acc_df["predicted"] - acc_df["actual"]).abs().mean():.5f}" if not acc_df.empty else "–")
    
    # ───────────────────────────── Simulation Charts ─────────────────────────────
    st.subheader("Simulation Charts")
    # Select currency pairs based on simulation details data
    sim_df = simulation_details(OUTPUT_DIR)
    if sim_df.empty:
        st.info("Run a simulation first to generate data.")
        selected_pairs = []
    else:
        unique_syms = sorted(sim_df["symbol"].unique())
        display_pairs = [s.replace("=X", "") for s in unique_syms]
        display_pairs = [p[:3] + "/" + p[3:] for p in display_pairs]
        selected_pairs = st.multiselect("Select currency pairs to display", options=display_pairs, default=display_pairs)
    # Equity curve per selected currency
    st.subheader("Equity Curve")
    sim_df = simulation_details(OUTPUT_DIR)
    if sim_df.empty:
        st.info("Run a simulation first to populate data in Training_outputs.")
    else:
        symbols_to_plot = selected_pairs if 'selected_pairs' in locals() else [selected]
        equity_frames = []
        for pair in symbols_to_plot:
            df_sym = sim_df[sim_df["symbol"] == pair.replace("/", "") + "=X"].copy()
            if df_sym.empty:
                st.warning(f"No simulation details for {pair}.")
                continue
            df_sym["date"] = pd.to_datetime(df_sym["date"])
            df_sym[["realized_pnl", "floating_pnl"]] = df_sym[["realized_pnl", "floating_pnl"]].fillna(0)
            df_sym["equity"] = initial_capital + df_sym["realized_pnl"].cumsum() + df_sym["floating_pnl"]
            df_sym["pair"] = pair
            equity_frames.append(df_sym[["date", "equity", "pair"]])
        if equity_frames:
            combined = pd.concat(equity_frames, ignore_index=True)
            fig_eq = px.line(combined, x="date", y="equity", color="pair", template="plotly_white",
                             labels={"equity": "Equity ($)", "date": "Date", "pair": "Currency Pair"},
                             title="Equity Curves")
            st.plotly_chart(fig_eq, use_container_width=True)

    # Prediction and Trade Analysis Charts
    st.subheader("Prediction and Trade Analysis Charts")
    sim_df = simulation_details(OUTPUT_DIR)
    if sim_df.empty:
        st.info("Run a simulation first to generate data.")
    else:
        for pair in selected_pairs:
            sym = pair.replace("/", "") + "=X"
            df_pair = sim_df[sim_df["symbol"] == sym].copy()
            if df_pair.empty:
                st.warning(f"No simulation details for {pair}.")
                continue
            df_pair["date"] = pd.to_datetime(df_pair["date"])
            fig = go.Figure()
            # Actual price trace
            fig.add_trace(go.Scatter(
                name="Actual Price",
                x=df_pair["date"], y=df_pair["actual_price"],
                mode="lines+markers",
                text=["Actual Price"] * len(df_pair),
                hovertemplate="<b>%{text}</b><br>Date: %{x|%Y-%m-%d}<br>Price: %{y:.4f}<extra></extra>",
                line=dict(color="black"),
                marker=dict(color="black")
            ))
            # Predicted price trace
            fig.add_trace(go.Scatter(
                name="Predicted Price",
                x=df_pair["date"], y=df_pair["predicted_price"],
                mode="lines+markers",
                text=["Predicted Price"] * len(df_pair),
                hovertemplate="<b>%{text}</b><br>Date: %{x|%Y-%m-%d}<br>Price: %{y:.4f}<extra></extra>",
                line=dict(color="dodgerblue", dash="dash"),
                marker=dict(color="dodgerblue")
            ))
            # Action markers
            actions = {
                "OPEN_LONG": ("circle", "green", 12, "Open Long"),
                "OPEN_SHORT": ("triangle-down", "red", 12, "Open Short"),
                "ADD_LONG": ("square", "lime", 10, "Add Long"),
                "ADD_SHORT": ("x", "salmon", 10, "Add Short"),
                "CLOSE": ("diamond", "blue", 10, "Close Position")
            }
            for action, (symbol, color, size, label) in actions.items():
                action_df = df_pair[df_pair["action"] == action]
                if not action_df.empty:
                    fig.add_trace(go.Scatter(
                        name=label,
                        x=action_df["date"], y=action_df["actual_price"],
                        mode="markers",
                        marker=dict(symbol=symbol, color=color, size=size, line=dict(color="black", width=1)),
                        hovertemplate=f"Action: {label}<br>Date: %{{x|%Y-%m-%d}}<br>Price: %{{y:.4f}}<extra></extra>"
                    ))
            fig.update_layout(
                title=f"Prediction and Trade Analysis for {pair}",
                xaxis_title="Date",
                yaxis_title="Price",
                template="plotly_white",
                hovermode="x unified"
            )
            st.plotly_chart(fig, use_container_width=True)

    # Accuracy metrics
    if not acc_df.empty:
        with st.expander("Simulation Accuracy (MAE & MAPE) by Currency Pair"):
            st.dataframe(acc_df.groupby("symbol").apply(
                lambda g: pd.Series({
                    "MAE": (g["predicted"] - g["actual"]).abs().mean(),
                    "MAPE%": ((g["predicted"] - g["actual"]).abs() / g["actual"]).mean() * 100,
                })
            ).round(4), use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)

# ────────────────────────────── Summary Page ──────────────────────────────
def summary_page():
    st.markdown('<div class="main-card">', unsafe_allow_html=True)
    st.title("📈 Performance Summary")
    
    # ────────────────────────────── Training Analysis Summary ──────────────────────────────
    st.subheader("🔍 Training Analysis Summary")
    train_acc_df = load_accuracy(OUTPUT_DIR)
    trained = load_trained_symbols(OUTPUT_DIR)
    
    if not trained:
        st.warning("No currencies have been trained yet. Please train a currency first on the Forex Analysis page.")
        return
        
    display_pairs = [s.replace("=X","") for s in trained]
    display_pairs = [p[:3] + "/" + p[3:] for p in display_pairs]
    
    if not display_pairs:
        st.warning("No valid currency pairs found in training data.")
        return
        
    selected_train = st.selectbox("Select analysis currency", display_pairs)
    if not selected_train:
        st.warning("Please select a currency pair to analyze.")
        return
        
    train_symbol = selected_train.replace("/","") + "=X"
    if train_acc_df.empty:
        st.info("No training accuracy data available.")
    else:
        df_train = train_acc_df[train_acc_df["symbol"] == train_symbol]
        if df_train.empty:
            st.warning(f"No training records for {selected_train}.")
        else:
            mae = (df_train["predicted"] - df_train["actual"]).abs().mean()
            mape = ((df_train["predicted"] - df_train["actual"]).abs() / df_train["actual"]).mean() * 100
            c1, c2 = st.columns(2)
            c1.metric("Training MAE", f"{mae:.5f}")
            c2.metric("Training MAPE%", f"{mape:.2f}%")

    # ────────────────────────────── Simulation Summary ──────────────────────────────
    st.subheader("📊 Simulation Summary")
    sim_acc_df = pd.read_csv(OUTPUT_DIR / "simulation_prediction_accuracy.csv") if (OUTPUT_DIR / "simulation_prediction_accuracy.csv").exists() else pd.DataFrame()
    selected_sim = st.selectbox("Select simulation currency", display_pairs, key="sim_summary")
    sim_symbol = selected_sim.replace("/", "") + "=X"
    
    if sim_acc_df.empty:
        st.info("No simulation accuracy data available.")
    else:
        df_sim = sim_acc_df[sim_acc_df["symbol"] == sim_symbol]
        if df_sim.empty:
            st.warning(f"No simulation records for {selected_sim}.")
        else:
            mae_sim = (df_sim["predicted"] - df_sim["actual"]).abs().mean()
            mape_sim = ((df_sim["predicted"] - df_sim["actual"]).abs() / df_sim["actual"]).mean() * 100
            c3, c4 = st.columns(2)
            c3.metric("Simulation MAE", f"{mae_sim:.5f}")
            c4.metric("Simulation MAPE%", f"{mape_sim:.2f}%")

    sim_df = simulation_details(OUTPUT_DIR)
    if sim_df.empty:
        st.info("No simulation details available. Run a simulation first.")
    else:
        initial_capital_input = st.number_input("Initial Capital per Asset ($)", min_value=1, value=1000, step=100)
        df_sym = sim_df[sim_df["symbol"] == sim_symbol].copy()
        
        if df_sym.empty:
            st.warning(f"No simulation records for {selected_sim}.")
        else:
            df_sym["date"] = pd.to_datetime(df_sym["date"])
            df_sym[["realized_pnl", "floating_pnl"]] = df_sym[["realized_pnl", "floating_pnl"]].fillna(0)
            df_sym["equity"] = initial_capital_input + df_sym["realized_pnl"].cumsum() + df_sym["floating_pnl"]
            eq_init, eq_final = df_sym["equity"].iloc[0], df_sym["equity"].iloc[-1]
            eq_roi = (eq_final / eq_init - 1) * 100 if eq_init else 0
            
            c1, c2, c3 = st.columns(3)
            c1.metric("Initial Equity", f"${eq_init:,.2f}")
            c2.metric("Final Equity", f"${eq_final:,.2f}")
            c3.metric("ROI", f"{eq_roi:.2f}%")

            st.plotly_chart(px.line(df_sym, x="date", y="equity", title=f"Equity Curve – {selected_sim}", template="plotly_white", labels={"date": "Date", "equity": "Equity ($)"}), use_container_width=True)
    st.markdown('</div>', unsafe_allow_html=True)

def main() -> None:
    st.set_page_config("BRich Forex Trader", layout="wide", page_icon="💹")
    st.markdown("""
    <style>
    /* Global sidebar styling */
    [data-testid="stSidebar"] {
        background-color: #CDCDCD !important;
    }
    [data-testid="stSidebar"] .sidebar-title {
        font-size: 2rem !important; font-weight: 800 !important; margin: 7rem 0 2rem 0!important; color: #222 !important; text-align: center !important; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
    }
    [data-testid="stSidebar"] button {
        width: 80% !important; margin: 0.5rem auto !important; text-align: center !important; box-shadow: 0 2px 8px rgba(0,0,0,0.12); display: block; border-radius: 12px;
    }
    </style>
    """, unsafe_allow_html=True)

    # Initialize session state for page
    st.session_state.setdefault("page", "Landing Page")
    st.sidebar.markdown('<div class="sidebar-title">Navigation</div>', unsafe_allow_html=True)

    # Navigation buttons
    for p in ["Landing Page", "Forex Analysis", "Trading Simulation", "Summary"]:
        if st.sidebar.button(p, key=p):
            st.session_state["page"] = p
            st.rerun()
        st.sidebar.markdown("<hr style='margin: 0.5em 0; border: 1px solid #bbb;'>", unsafe_allow_html=True)

    # Display selected page
    page = st.session_state["page"]
    if page == "Landing Page":
        landing_page()
    elif page == "Forex Analysis":
        analysis_page()
    elif page == "Trading Simulation":
        simulation_page()
    elif page == "Summary":
        summary_page()

    # Data refresh button
    if st.sidebar.button("🔄 Reset Data"):
        st.cache_data.clear()
        if OUTPUT_DIR.exists():
            try:
                for file_path in OUTPUT_DIR.glob('*'):
                    if file_path.is_file():
                        file_path.unlink()
                    else:
                        for subfile in file_path.glob('**/*'):
                            if subfile.is_file():
                                subfile.unlink()
                        file_path.rmdir()
                OUTPUT_DIR.rmdir()
                st.success("Successfully cleared all training data!")
            except PermissionError:
                st.error(f"Could not remove {file_path}. Some files may be in use.")
            except Exception as e:
                st.error(f"Error while clearing data: {str(e)}")
        st.rerun()

if __name__ == "__main__":
    main()
